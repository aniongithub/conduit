#!/usr/local/bin/python3.11

import argparse
import os
from conduit.pipeline import Pipeline
from pathlib import Path
from conduit.common import logger, set_log_level

# Adapted from: https://stackoverflow.com/a/68829190/802203
class kwargs_append_action(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        try:
            if len(values[0]) > 1:
                d = dict(map(lambda x: x.split('='),values[0].split(' ')))
            else:
                d = {}
        except ValueError as ex:
            raise argparse.ArgumentError(self, f"Could not parse argument \"{values}\" as k1=v1 k2=v2 ... format")
        setattr(args, self.dest, d)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("pipeline", help = "Path to the pipeline configuration to run")
    parser.add_argument("-v", "--visualize-only", action="store_true", help = "Only visualize pipeline structure, don't execute", default = False)
    parser.add_argument("-w", "--working-directory", help = "Set the working directory for this pipeline", default = os.getcwd())
    parser.add_argument("-a", "--args", dest="args", nargs="*", required = False, default = {},
        action = kwargs_append_action, metavar = "KEY=VALUE", help = "Define arguments that will be substituted in the pipeline file")
    parser.add_argument("--continue-on-error", action="store_false", help = "Continue pipeline execution even if an element fails", default = True, dest="stop_on_error")
    parser.add_argument("--log-level", choices=["DEBUG", "INFO", "WARNING", "ERROR"], default="INFO", 
        help="Set the logging level (default: INFO)")
    args = parser.parse_args()

    # Set log level before doing anything else
    set_log_level(args.log_level)

    # Direct mapping - no confusing logic
    stop_on_error = args.stop_on_error

    # Set our arguments in the environment for expansion
    for arg, value in args.args.items():
        os.environ[arg] = value

    pipeline_path = Path(args.pipeline).absolute()
    os.chdir(args.working_directory)
    output = Pipeline.from_config(pipeline_path, expand_env = True, stop_on_error = stop_on_error)

    print("Pipeline structure:")

    graph = output.to_graph()
    log = logger()

    try:
        from asciinet import graph_to_ascii
        log.info("Using asciinet for pipeline visualization")
        use_dagviz = False
    except ImportError:
        log.warning("asciinet cannot be imported, using py-dagviz for visualization instead. Try installing Java in your environment if you want to use asciinet.")
        use_dagviz = True
        from dagviz import visualize_dag

    if use_dagviz:
        print(visualize_dag(graph, round_angle = True))
    else:
        print(graph_to_ascii(graph))
    
    if args.visualize_only:
        return

    result = output.run(None)

if __name__ == "__main__":
    cwd = os.getcwd()
    try:
        main()
    finally:
        os.chdir(cwd)