#!/usr/local/bin/python3.11

import argparse
import os
from conduit.pipeline import Pipeline
from pathlib import Path
from conduit.common import logger, set_log_level

# Adapted from: https://stackoverflow.com/a/68829190/802203
class kwargs_append_action(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        try:
            if len(values[0]) > 1:
                d = dict(map(lambda x: x.split('='),values[0].split(' ')))
            else:
                d = {}
        except ValueError as ex:
            raise argparse.ArgumentError(self, f"Could not parse argument \"{values}\" as k1=v1 k2=v2 ... format")
        setattr(args, self.dest, d)

def cmd_run(args):
    """Run a pipeline configuration"""
    # Set log level
    set_log_level(args.log_level)
    
    # Set our arguments in the environment for expansion
    for arg, value in args.args.items():
        os.environ[arg] = value

    pipeline_path = Path(args.pipeline).absolute()
    os.chdir(args.working_directory)
    output = Pipeline.from_config(pipeline_path, expand_env=True, stop_on_error=args.stop_on_error)

    result = output.run(None)
    return result

def cmd_visualize(args):
    """Visualize a pipeline structure without running it"""
    # Set log level
    set_log_level(args.log_level)
    
    # Set our arguments in the environment for expansion
    for arg, value in args.args.items():
        os.environ[arg] = value

    pipeline_path = Path(args.pipeline).absolute()
    os.chdir(args.working_directory)
    output = Pipeline.from_config(pipeline_path, expand_env=True, stop_on_error=args.stop_on_error)

    print("Pipeline structure:")
    graph = output.to_graph()
    log = logger()

    try:
        from asciinet import graph_to_ascii
        log.info("Using asciinet for pipeline visualization")
        use_dagviz = False
    except ImportError:
        log.warning("asciinet cannot be imported, using py-dagviz for visualization instead. Try installing Java in your environment if you want to use asciinet.")
        use_dagviz = True
        from dagviz import visualize_dag

    if use_dagviz:
        print(visualize_dag(graph, round_angle=True))
    else:
        print(graph_to_ascii(graph))

def cmd_serve(args):
    """Start the Conduit server"""
    # Set log level
    set_log_level(args.log_level)
    
    try:
        from conduit.server import start_server
        start_server(host=args.host, port=args.port, working_directory=args.working_directory)
    except ImportError:
        logger().error("FastAPI and uvicorn are required for server mode. Install with: pip install fastapi uvicorn")
        return 1

def main():
    parser = argparse.ArgumentParser(description="Conduit - A streaming data pipeline framework")
    parser.add_argument("--log-level", choices=["DEBUG", "INFO", "WARNING", "ERROR"], default="INFO", 
        help="Set the logging level (default: INFO)")
    
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Run command
    run_parser = subparsers.add_parser('run', help='Run a pipeline configuration')
    run_parser.add_argument("pipeline", help="Path to the pipeline configuration to run")
    run_parser.add_argument("-w", "--working-directory", help="Set the working directory for this pipeline", default=os.getcwd())
    run_parser.add_argument("-a", "--args", dest="args", nargs="*", required=False, default={},
        action=kwargs_append_action, metavar="KEY=VALUE", help="Define arguments that will be substituted in the pipeline file")
    run_parser.add_argument("--continue-on-error", action="store_false", help="Continue pipeline execution even if an element fails", default=True, dest="stop_on_error")
    
    # Visualize command
    vis_parser = subparsers.add_parser('visualize', help='Visualize pipeline structure without running')
    vis_parser.add_argument("pipeline", help="Path to the pipeline configuration to visualize")
    vis_parser.add_argument("-w", "--working-directory", help="Set the working directory for this pipeline", default=os.getcwd())
    vis_parser.add_argument("-a", "--args", dest="args", nargs="*", required=False, default={},
        action=kwargs_append_action, metavar="KEY=VALUE", help="Define arguments that will be substituted in the pipeline file")
    vis_parser.add_argument("--continue-on-error", action="store_false", help="Continue pipeline execution even if an element fails", default=True, dest="stop_on_error")
    
    # Serve command
    serve_parser = subparsers.add_parser('serve', help='Start the Conduit server')
    serve_parser.add_argument("--host", default="127.0.0.1", help="Host to bind the server to (default: 127.0.0.1)")
    serve_parser.add_argument("--port", type=int, default=8000, help="Port to bind the server to (default: 8000)")
    serve_parser.add_argument("-w", "--working-directory", help="Set the working directory for pipeline execution", default=os.getcwd())
    
    args = parser.parse_args()
    
    if args.command is None:
        parser.print_help()
        return 1
    
    # Route to appropriate command
    if args.command == 'run':
        return cmd_run(args)
    elif args.command == 'visualize':
        return cmd_visualize(args)
    elif args.command == 'serve':
        return cmd_serve(args)

if __name__ == "__main__":
    cwd = os.getcwd()
    try:
        exit_code = main()
        exit(exit_code if exit_code is not None else 0)
    finally:
        os.chdir(cwd)